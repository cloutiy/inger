/*************************************************
 *                                               *
 *  Module: ast.c                                *
 *  Description:                                 *
 *      Interface to the abstract syntax tree.   *
 *  Author: Van Oostenrijk, A.C.                 *
 *  Modifications:                               *
 *                                               *
 *************************************************
 *                                               *
 *   This program is free software; you can      *
 *   redistribute it and/or modify  it under     *
 *   the terms of the GNU General Public         *
 *   License as published by the Free            *
 *   Software Foundation; either version 2       *
 *   of the License, or (at your option) any     *
 *   later version.                              *
 *                                               *
 *************************************************/

#ifndef AST_H
#define AST_H

#include "defs.h"
#include "tokenvalue.h"
#include "tree.h"
#include "types.h"

typedef struct AstNode
{
    int         id;
    Tokenvalue  val;
    Type       *type;
    int         lineno;
} AstNode;

/*************************************************
 *                                               *
 *  MACROS                                       *
 *                                               *
 *************************************************/
#define TOAST(node) ((AstNode*) node->data)



/*************************************************
 *                                               *
 *                                               *
 *          AST MANIPULATION FUNCTIONS           *
 *                                               *
 *                                               *
 *************************************************/

/*
 * Create a new node with the specified
 * contents. The new node is returned.
 * The node's type field is set to NULL.
 * The node's val field is set to int(0).
 */
TreeNode *CreateAstNode( int id, int lineno );

/* Create a new node with the specified
 * identifier and token value. The node's type
 * field is set to NULL.
 * The node's val field is set to int(0).
 *
 * The new node is returned.
 */
TreeNode *CreateAstNodeVal( int id, Tokenvalue val, int lineno );

/* Create a new node with the specified data and add
 * it to the tree as a child of [parentnode].
 * The node's type field is set to NULL.
 * The node's val field is set to int(0).
 *
 * Pre: [parentnode] may be NULL, in which case
 *      a new root is created.
 */
TreeNode* AddNewAstNode( TreeNode *parentnode, int id, int lineno );

/* Add a child node to an existing node.
 *
 * Pre:  [parentnode] and [node] are not NULL.
 */
void AddAstChild( TreeNode *parentnode, TreeNode *node );

/* Remove node [node] from ast. The node contents
 * and its children get deleted.
 *
 * Pre:  [node] is not NULL.
 */
void RemoveAstNode( TreeNode *node );

/*
 * Print the ast on the console, starting
 * with node [source].
 *
 * Pre:  [source] is not NULL.
 */
void PrintAst( TreeNode *source );

/*
 * Dump ast to file [filename], starting
 * with node [source].
 * 
 * Pre:  [filename] and [source] are not 
 *       NULL.
 */
void DumpAst( char *filename, TreeNode *source );

/*
 * Simplify the AST [source] generated by the parser by
 * removing the FACTOR and STATEMENT nodes.
 * These nodes hold no information and merely
 * clutter up the tree.
 *
 * Pre: [source] is a valid AST.
 */
void SimplifyAst( TreeNode *source );




/*************************************************
 *                                               *
 *                                               *
 *              A C C E S S O R S                *
 *                                               *
 *                                               *
 *************************************************/

/*
 *  Converts a Ast Type Node to a simple type.
 *  [node] : Type node ID from ast.
 *
 *  Examples:
 *  NODE_INT -> INT
 *  NODE_BOOL -> BOOL
 */
SimpleType NodeToSimpleType( int id );

/*
 * Retrieve the source file line number associated
 * with a node.
 */
int GetLineNumberFromNode( TreeNode *node );

/*
 * Return type constant representing data type from
 * a NODE_DECLARATION node.
 *
 *                            NODE_DECLARATION
 *                                   |
 *       --------------------------------------------------------------
 *       |           |               |                |               |
 *   NODE_INT  NODE_REFERENCE  NODE_LIT_IDENT  NODE_INDEXBLOCK  NODE_INITIALIZER 
 *   --------
 */
SimpleType GetTypeFromDecl( TreeNode *declNode );


/*
 * Return initializer as a string from a
 * NODE_DECLARATION node.
 * 
 *                            NODE_DECLARATION
 *                                   |
 *       --------------------------------------------------------------
 *       |           |               |                |               |
 *   NODE_INT  NODE_REFERENCE  NODE_LIT_IDENT  NODE_INDEXBLOCK  NODE_INITIALIZER 
 *                                                              ----------------
 */
 char* GetInitializerFromDecl( TreeNode *declNode );

/*
 * Return name char* of variable from a
 * NODE_DECLARATION node.
 *
 *                            NODE_DECLARATION
 *                                   |
 *       --------------------------------------------------------------
 *       |           |               |                |               |
 *   NODE_INT  NODE_REFERENCE  NODE_LIT_IDENT  NODE_INDEXBLOCK  NODE_INITIALIZER 
 *                             --------------
 */
char *GetNameFromDecl( TreeNode *declNode );

/*
 * Return number of dimensions (references + indexes)
 * from a NODE_DECLARATION node.
 *
 *                            NODE_DECLARATION
 *                                   |
 *       --------------------------------------------------------------
 *       |           |               |                |               |
 *   NODE_INT  NODE_REFERENCE  NODE_LIT_IDENT  NODE_INDEXBLOCK  NODE_INITIALIZER 
 *             --------------                  ---------------
 */
int GetDimensionsFromDecl( TreeNode *declNode );

/*
 * Returns the name of an identifier 
 * from a NODE_LIT_IDENTIFER node.
 */
char* GetNameOfIdentifier( TreeNode *identNode );

/*
 * Return size of specified index. index number starts at 0.
 *
 *                            NODE_DECLARATION
 *                                   |
 *       --------------------------------------------------------------
 *       |           |               |                |               |
 *   NODE_INT  NODE_REFERENCE  NODE_LIT_IDENT  NODE_INDEXBLOCK  NODE_INITIALIZER 
 *                                             ---------------
 */
int GetDimensionSizeFromDecl( TreeNode *declNode, int index );

/*
 * Retrieve function name from NODE_FUNCTIONHEADER node.
 *
 *                          NODE_FUNCTIONHEADER
 *                                   |
 *        ------------------------------------------------------
 *        |                |               |                   |
 *   NODE_MODIFIERS  NODE_LIT_IDENT  NODE_PARAMLIST  NODE_VOID/NODE_RETTYPE
 *                   --------------
 */
char *GetNameFromHeader( TreeNode *headerNode );

/*
 * Retrieve start (existent or not)  from NODE_FUNCTIONHEADER node.
 *
 *                          NODE_FUNCTIONHEADER
 *                                   |
 *        ------------------------------------------------------
 *        |                |               |                   |
 *   NODE_MODIFIERS  NODE_LIT_IDENT  NODE_PARAMLIST  NODE_VOID/NODE_RETTYPE
 *        |
 *    NODE_START
 *    ----------
 */
BOOL IsStartFromHeader( TreeNode *headerNode );

BOOL IsExternFromHeader( TreeNode *headerNode ); // TO BE DELETED

/*
 * Retrieve extern (existent or not)  from NODE_GLOBAL node.
 *
 *            NODE_GLOBAL
 *                |
 *        ------------------
 *        |                |               
 *    NODE_EXTERN     FUNCTION/DECLARATIONBLOCK
 */
BOOL IsExternFromGlobal( TreeNode *globalNode );

/*
 * Retrieve return type from NODE_FUNCTIONHEADER node.
 * Return NODE_VOID or the actual type node.
 *
 *                          NODE_FUNCTIONHEADER
 *                                   |
 *        ------------------------------------------------------
 *        |                |               |                   |
 *   NODE_MODIFIERS  NODE_LIT_IDENT  NODE_PARAMLIST  NODE_VOID/NODE_RETTYPE
 *                                                   ----------------------
 */
int GetReturnTypeFromHeader( TreeNode *headerNode );

/*
 * Return number of dimensions in non-void return type.
 * Return NODE_VOID or the actual type node.
 *
 *                          NODE_FUNCTIONHEADER
 *                                   |
 *        --------------------------------------------------
 *        |                |               |               |
 *   NODE_MODIFIERS  NODE_LIT_IDENT  NODE_PARAMLIST  NODE_RETTYPE
 *                                                         |
 *                                          ----------------------------
 *                                          |            |             |
 *                                      NODE_INT  NODE_REFERENCE  NODE_DIMBLOCK
 *                                                --------------  -------------
 *
 *   Examples:
 *   int **[][][] -----> 5
 *   int *        -----> 1
 *   int [][]     -----> 2  
 */
int GetReturnTypeDimensionsFromHeader( TreeNode *headerNode );

/*
 * Return number of parameters in function header
 * (0 if void).
 *
 *                          NODE_FUNCTIONHEADER
 *                                   |
 *        --------------------------------------------------
 *        |                |               |               |
 *   NODE_MODIFIERS  NODE_LIT_IDENT  NODE_PARAMLIST  NODE_RETTYPE
 *                                         |
 *                                        ...
 *
 *   Examples:
 *   f: void -> int             -----------> 0
 *   f: int **a -> int          -----------> 1
 *   f: int a; bool b[] -> int  -----------> 2
 */
int GetParamCountFromHeader( TreeNode *headerNode );

/*
 * Return type of indicated parameter from header.
 *
 *                          NODE_FUNCTIONHEADER
 *                                   |
 *        --------------------------------------------------
 *        |                |               |               |
 *   NODE_MODIFIERS  NODE_LIT_IDENT  NODE_PARAMLIST  NODE_RETTYPE
 *                                         |
 *                                         |
 *                                    NODE_PARAM
 *                                         |
 *          -----------------------------------------
 *          |           |              |            |
 *      NODE_INT NODE_REFERENCE NODE_LIT_IDENT NODE_DIMBLOCK
 *      --------
 */
int GetParamTypeFromHeader( TreeNode *headerNode, int index );

/*
 * Return name of indicated parameter from header.
 *
 *                          NODE_FUNCTIONHEADER
 *                                   |
 *        --------------------------------------------------
 *        |                |               |               |
 *   NODE_MODIFIERS  NODE_LIT_IDENT  NODE_PARAMLIST  NODE_RETTYPE
 *                                         |
 *                                         |
 *                                    NODE_PARAM
 *                                         |
 *          -----------------------------------------
 *          |           |              |            |
 *      NODE_INT NODE_REFERENCE NODE_LIT_IDENT NODE_DIMBLOCK
 *                              --------------
 */
char *GetParamNameFromHeader( TreeNode *headerNode, int index );

/*
 * Return name of indicated parameter from header.
 *
 *                          NODE_FUNCTIONHEADER
 *                                   |
 *        --------------------------------------------------
 *        |                |               |               |
 *   NODE_MODIFIERS  NODE_LIT_IDENT  NODE_PARAMLIST  NODE_RETTYPE
 *                                         |
 *                                         |
 *                                    NODE_PARAM
 *                                         |
 *          -----------------------------------------
 *          |           |              |            |
 *      NODE_INT NODE_REFERENCE NODE_LIT_IDENT NODE_DIMBLOCK
 *               --------------                -------------
 */
int GetParamDimensionsFromHeader( TreeNode *headerNode, int index );

/*
 * Return header node from function node.
 *
 *                       NODE_FUNCTION
 *                             |
 *                 ----------------------
 *                 |                    |
 *          NODE_FUNCTION           NODE_BLOCK
 *          -------------
 *
 * Pre:  [funcNode] is a valid node.
 */
TreeNode *GetHeaderFromFunction( TreeNode *funcNode );

/*
 * Return header node from function node.
 *
 *                       NODE_FUNCTION
 *                             |
 *                 ----------------------
 *                 |                    |
 *          NODE_FUNCTION           NODE_BLOCK
 *                                  ----------
 *
 * Pre:  [funcNode] is a valid node.
 */
TreeNode *GetBlockFromFunction( TreeNode *funcNode );

/*
 * Return function name from application node.
 *
 *                       NODE_APPLICATION
 *                             |
 *                 ----------------------
 *                 |                    |
 *          NODE_LIT_IDENT        NODE_ARGUMENTS 
 *          --------------
 *
 * Pre:  [appNode] is a valid node.
 */
char *GetNameFromApplication( TreeNode *appNode );

/*
 * Return number of arguments from application node.
 *
 *                       NODE_APPLICATION
 *                             |
 *                 ----------------------
 *                 |                    |
 *          NODE_LIT_IDENT        NODE_ARGUMENTS 
 *                                      |
 *                                      #
 *
 * Pre:  [appNode] is a valid node.
 */
int GetArgumentCountFromApplication( TreeNode *appNode );

/*
 * Return argument [index] from application node.
 *
 *                       NODE_APPLICATION
 *                             |
 *                 ----------------------
 *                 |                    |
 *          NODE_LIT_IDENT        NODE_ARGUMENTS 
 *                                      |
 *                                    node
 *                                    ----
 *
 * Pre:  [appNode] is a valid node.
 *       [index] is in the range of existing arguments.
 */
TreeNode *GetArgumentFromApplication( TreeNode *appNode, int index );

/*
 * Return left operand from assignment operation.
 *
 *                       NODE_ASSIGNMENT
 *                             |
 *                 ----------------------
 *                 |                    |
 *               node                 node
 *               ----
 *
 * Pre:  [opNode] is a valid node.
 */
int GetLeftOperand( TreeNode * opNode );

/*
 * Returns the name of the variable on the left
 * side of an assignment.
 *
 *                       NODE_ASSIGNMENT
 *                             |
 *                 ----------------------
 *                 |                    |
 *               node                 node
 *               ----
 *
 * Pre:  [ifNode] is a valid node.
 */
char* GetIdentifierFromAssignment( TreeNode *assignNode );

/*
 * Returns the expression from a
 * NODE_IF node.
 * 
 *                             NODE_IF
 *                                |
 *                 -----------------------------
 *                 |              |            |
 *          expression         then block  else block
 *
 * Pre:  [ifNode] is a valid node.
 */
TreeNode* GetExpressionFromIf( TreeNode *ifNode );


/*
 * Returns the then code block from a
 * NODE_IF node.
 * 
 *                             NODE_IF
 *                                |
 *                 -----------------------------
 *                 |              |            |
 *          expression         then block  else block
 *
 * Pre:  [ifNode] is a valid node.
 */
TreeNode* GetThenBlockFromIf( TreeNode *ifNode );

/*
 * Returns the else code block from a
 * NODE_ELSE node.
 * 
 *                             NODE_IF
 *                                |
 *                 -----------------------------
 *                 |              |            |
 *          expression         then block  else block
 *
 * Pre:  [ifNode] is a valid node.
 */
TreeNode* GetElseBlockFromIf( TreeNode *ifNode );

/*
 * Returns the expression from a
 * NODE_WHILE node.
 *
 *                           NODE_WHILE
 *                               |
 *               +---------------+---------------+
 *               |                               |
 *          expression                     code block
 *
 * Pre:  [whileNode] is a valid node.
 */
TreeNode* GetExpressionFromWhile( TreeNode *whileNode );

/*
 * Returns the code block from a
 * NODE_WHILE node.
 *
 *                           NODE_WHILE
 *                               |
 *               +---------------+---------------+
 *               |                               |
 *          expression                     code block
 *
 * Pre:  [whileNode] is a valid node.
 */
TreeNode* GetBlockFromWhile( TreeNode *whileNode );

/*
 * Test AST module.
 *
 * Post: Returns TRUE if test was successful,
 *       FALSE if it failed.
 */
BOOL TestAst();

#endif
